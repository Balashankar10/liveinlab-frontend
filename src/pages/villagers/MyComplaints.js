import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import './MyComplaints.css';

const API = process.env.REACT_APP_API_BASE;

// ЁЯФК Reusable Speech Component (Updated for Touch Only)
const SpeakOnTouch = ({ text, children }) => {
  const audioRef = useRef(null);

  const speakText = async () => {
    try {
      const res = await fetch(`${API}/tts/speak`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });

      if (!res.ok) throw new Error("Failed to get audio");

      const blob = await res.blob();
      const url = URL.createObjectURL(blob);
      audioRef.current.src = url;
      audioRef.current.play();
    } catch (err) {
      console.error("Speech Error:", err);
    }
  };

  return (
    <span onTouchStart={speakText}>
      {children}
      <audio ref={audioRef} />
    </span>
  );
};

const MyComplaints = () => {
  const [complaints, setComplaints] = useState([]);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchMyComplaints = async () => {
      const email = localStorage.getItem('email');
      if (!email) {
        setError('рокропройро░рпН рооро┐ройрпНройроЮрпНроЪро▓рпН роЗро▓рпНро▓рпИ');
        return;
      }

      try {
        const res = await axios.get(`${API}/complaint/my-complaints?email=${email}`);
        setComplaints(res.data);
      } catch (err) {
        console.error(err);
        setError('рокрпБроХро╛ро░рпНроХро│рпН рокрпЖро▒рпБро╡родро┐ро▓рпН рокро┐ро┤рпИ');
      }
    };

    fetchMyComplaints();
  }, []);

  const getStatusClass = (status) => {
    switch (status.toLowerCase()) {
      case 'pending':
        return 'complaint-status pending';
      case 'completed':
        return 'complaint-status completed';
      case 'rejected':
        return 'complaint-status rejected';
      default:
        return 'complaint-status';
    }
  };

  const getTamilStatus = (status) => {
    switch (status.toLowerCase()) {
      case 'pending':
        return 'роиро┐ро▓рпБро╡рпИ';
      case 'completed':
        return 'роорпБроЯро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ';
      case 'rejected':
        return 'роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ';
      default:
        return status;
    }
  };

  const getStatusSpeech = (status) => {
    switch (status.toLowerCase()) {
      case 'pending':
        return 'роиро┐ро▓рпИ роиро┐ро▓рпБро╡рпИ';
      case 'completed':
        return 'роиро┐ро▓рпИ роорпБроЯро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ';
      case 'rejected':
        return 'роиро┐ро▓рпИ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ';
      default:
        return status;
    }
  };

  return (
    <div className="container">
      <h2><SpeakOnTouch text="роОройрпН рокрпБроХро╛ро░рпНроХро│рпН">роОройрпН рокрпБроХро╛ро░рпНроХро│рпН</SpeakOnTouch></h2>

      <div className="status-labels">
        <SpeakOnTouch text="рокроЪрпНроЪрпИ роОройрпНрокродрпБ роиро┐ро░рпНро╡ро╛роХро┐ рокрпБроХро╛ро░рпИ роорпБроЯро┐родрпНродрпБро╡ро┐роЯрпНроЯродро╛роХ рокрпКро░рпБро│рпН">
          <span className="status-label completed">роорпБроЯро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ</span>
        </SpeakOnTouch>
        <SpeakOnTouch text="роороЮрпНроЪро│рпН роОройрпНрокродрпБ рокрпБроХро╛ро░рпН роиро┐ро▓рпБро╡рпИропро┐ро▓рпН роЙро│рпНро│родрпБ роОройрпНрокродрпИроХрпН роХрпБро▒ро┐роХрпНроХрпБроорпН">
          <span className="status-label pending">роиро┐ро▓рпБро╡рпИ</span>
        </SpeakOnTouch>
        <SpeakOnTouch text="роЪро┐ро╡рокрпНрокрпБ роОройрпНрокродрпБ роиро┐ро░рпНро╡ро╛роХро┐ рокрпБроХро╛ро░рпИ роиро┐ро░ро╛роХро░ро┐родрпНродрпБро╡ро┐роЯрпНроЯродро╛роХ рокрпКро░рпБро│рпН">
          <span className="status-label rejected">роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ</span>
        </SpeakOnTouch>
      </div>

      {error && (
        <p className="error-message">
          <SpeakOnTouch text={error}>{error}</SpeakOnTouch>
        </p>
      )}

      {complaints.length === 0 ? (
        <p><SpeakOnTouch text="рокрпБроХро╛ро░рпНроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ.">рокрпБроХро╛ро░рпНроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ.</SpeakOnTouch></p>
      ) : (
        complaints.map((c) => (
          <div key={c._id} className="complaint-card">
            <p>
              <strong><SpeakOnTouch text="родро▓рпИрокрпНрокрпБ">родро▓рпИрокрпНрокрпБ:</SpeakOnTouch></strong>{' '}
              <SpeakOnTouch text={c.subject}>{c.subject}</SpeakOnTouch>
            </p>
            <p>
              <strong><SpeakOnTouch text="роорпБроХро╡ро░ро┐">роорпБроХро╡ро░ро┐:</SpeakOnTouch></strong>{' '}
              <SpeakOnTouch text={c.address}>{c.address}</SpeakOnTouch>
            </p>
            <p>
              <strong><SpeakOnTouch text="ро╡ро┐ро╡ро░роорпН">ро╡ро┐ро╡ро░роорпН:</SpeakOnTouch></strong>{' '}
              <SpeakOnTouch text={c.description}>{c.description}</SpeakOnTouch>
            </p>
            <p>
              <strong><SpeakOnTouch text="роиро┐ро▓рпИ">роиро┐ро▓рпИ:</SpeakOnTouch></strong>{' '}
              <SpeakOnTouch text={getStatusSpeech(c.status)}>
                <span className={getStatusClass(c.status)}>
                  {getTamilStatus(c.status)}
                </span>
              </SpeakOnTouch>
            </p>
            {c.imageUrl && (
              <img
                src={c.imageUrl}  // Cloudinary URL is used directly
                alt="рокрпБроХро╛ро░рпН"
              />
            )}
            <p>
              <strong><SpeakOnTouch text="роЗроЯроорпН">роЗроЯроорпН:</SpeakOnTouch></strong>{' '}
              <a href={c.location?.gmapUrl} target="_blank" rel="noopener noreferrer">
                <SpeakOnTouch text="ро╡ро░рпИрокроЯродрпНродро┐ро▓рпН роХро╛рогрпНроХ">ро╡ро░рпИрокроЯродрпНродро┐ро▓рпН роХро╛рогрпНроХ</SpeakOnTouch>
              </a>
            </p>
          </div>
        ))
      )}
    </div>
  );
};

export default MyComplaints;
