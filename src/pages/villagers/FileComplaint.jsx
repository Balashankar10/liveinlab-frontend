import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './FileComplaint.css';

const API = process.env.REACT_APP_API_BASE;

// ЁЯФК Reusable Speech Component (Updated for Touch Only)
const SpeakOnTouch = ({ text, children }) => {
  const audioRef = useRef(null);

  const speakText = async () => {
    try {
      const res = await fetch(`${API}/tts/speak`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });

      if (!res.ok) throw new Error("Failed to get audio");

      const blob = await res.blob();
      const url = URL.createObjectURL(blob);

      // Check if the audio element is available
      if (audioRef.current) {
        audioRef.current.src = url;
        audioRef.current.play();
      } else {
        console.error('Audio element is not available');
      }
    } catch (error) {
      console.error("Speech error:", error);
    }
  };

  return (
    <span onTouchStart={speakText}>
      {children}
      <audio ref={audioRef} />
    </span>
  );
};

const FileComplaint = () => {
  const [formData, setFormData] = useState({
    subject: '',
    name: '',
    address: '',
    description: '',
  });
  const [image, setImage] = useState(null);
  const [location, setLocation] = useState({ lat: null, lng: null });
  const [errorMsg, setErrorMsg] = useState('');
  const [successMsg, setSuccessMsg] = useState('');

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        setLocation({
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        });
      },
      (err) => {
        console.error('роЗроЯродрпНродрпИ рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ', err);
      }
    );
  }, []);

  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setErrorMsg('');
    setSuccessMsg('');
  
    if (!location.lat || !location.lng) {
      setErrorMsg("ЁЯУН роЗроЯроорпН родропро╛ро░рпН роЖроХро╡ро┐ро▓рпНро▓рпИ");
      return;
    }
  
    const data = new FormData();
    data.append('subject', formData.subject);
    data.append('name', formData.name);
    data.append('address', formData.address);
    data.append('description', formData.description);
    data.append('image', image);
    data.append('lat', location.lat);
    data.append('lng', location.lng);
    data.append('userEmail', localStorage.getItem('email'));
  
    try {
      const res = await axios.post(`${API}/complaint/file`, data);
      if (res.data.message === 'Complaint filed successfully') {
        setSuccessMsg('тЬЕ рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!');
        setFormData({ subject: '', name: '', address: '', description: '' });
        setImage(null);
  
        // тЬЕ Speak in Tamil
        const speechText = "рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ";
        await fetch(`${API}/tts/speak`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text: speechText }),
        })
        .then((res) => res.blob())
        .then((blob) => {
          const url = URL.createObjectURL(blob);

          // тЫФ Stop other ongoing audios
          const existingAudios = document.querySelectorAll("audio");
          existingAudios.forEach((a) => {
            a.pause();
            a.currentTime = 0;
          });

          // тЬЕ Play success message
          const audio = new Audio(url);
          audio.play();
        })
        .catch((err) => console.error("Speech error:", err));
  
      } else {
        setErrorMsg('тЭМ рокрпБроХро╛ро░рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ');
      }
    } catch (err) {
      console.error('Axios error:', err.response || err.message);
      setErrorMsg('тЭМ рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐роХрпНроХ рокро┐ро┤рпИ');
    }
  };

  return (
    <div className="file-complaint-container">
      <h2>
        <SpeakOnTouch text="рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐">ЁЯУЭ рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐</SpeakOnTouch>
      </h2>

      <form className="file-complaint-form" onSubmit={handleSubmit} encType="multipart/form-data">
        <SpeakOnTouch text="родро▓рпИрокрпНрокрпБ">
          <input type="text" name="subject" placeholder="родро▓рпИрокрпНрокрпБ" value={formData.subject} onChange={handleChange} required />
        </SpeakOnTouch>

        <SpeakOnTouch text="рокрпЖропро░рпН">
          <input type="text" name="name" placeholder="рокрпЖропро░рпН" value={formData.name} onChange={handleChange} required />
        </SpeakOnTouch>

        <SpeakOnTouch text="роорпБроХро╡ро░ро┐">
          <input type="text" name="address" placeholder="роорпБроХро╡ро░ро┐" value={formData.address} onChange={handleChange} required />
        </SpeakOnTouch>

        <SpeakOnTouch text="ро╡ро┐ро╡ро░роорпН">
          <textarea name="description" placeholder="ро╡ро┐ро╡ро░роорпН" value={formData.description} onChange={handleChange} required></textarea>
        </SpeakOnTouch>

        <label>
          <SpeakOnTouch text="рокроЯроорпН роХрпЗрооро░ро╛ роЕро▓рпНро▓родрпБ роХрпЛрокрпНрокро╛роХ рокродро┐ро╡рпЗро▒рпНро▒рпБ">ЁЯУ╖ рокроЯроорпН (роХрпЗрооро░ро╛/роХрпЛрокрпНрокрпБ):</SpeakOnTouch>
        </label>
        <input type="file" accept="image/*" capture="environment" onChange={(e) => setImage(e.target.files[0])} required />

        {location.lat && location.lng && (
          <button type="button" onClick={() => window.open(`https://maps.google.com/?q=${location.lat},${location.lng}`, '_blank')}>
            <SpeakOnTouch text="Google Maps роЗро▓рпН роЙроЩрпНроХро│рпН роЗроЯродрпНродрпИ роХро╛рог">ЁЯУН Google Maps роЗро▓рпН роЗроЯродрпНродрпИ роХро╛рогрпНроХ</SpeakOnTouch>
          </button>
        )}

        <button type="submit">
          <SpeakOnTouch text="рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐">рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐</SpeakOnTouch>
        </button>
      </form>

      {successMsg && <p className="status-message success">{successMsg}</p>}
      {errorMsg && <p className="status-message error">{errorMsg}</p>}
    </div>
  );
};

export default FileComplaint;
